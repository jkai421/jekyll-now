---
layout: post
title: Python导表工具总结
---

五一前写了excel到csv批量转换的工具，原本以为是一件很简单的工作，结果由于各种奇怪的格式问题前后
搞了两天。在这里进行一下总结。

##工具
这个工具是用python写的，python处理文本有着极强大的工具库。读取excel选择的是xlrd，写csv选用的
是python的csv包。

xlrd在读取excel时有一些需要了解和注意的事情：

1. xlrd读取的内容与excel中所见到的或者由excel手动转换生成的csv文件中的内容**不是完全一致的**。

2. sheet的nrows和ncols本别表示worksheet中的行数和列数，这里的行数和列数指的是存在**非空格**内容
的最大行数和列数，如果在行数和列数区域以外，excel中存在多余空格的cell，这样的cell不会被计入sheet中。

3. 单元格类型

    1. Text 文本：这是由xlrd.XL_CELL_TEXT常数表示的。 这种类型的单元格的值是unicode对象。

    2. Number 数字: 这是由xlrd.XL_CELL_NUMBER常数表示的。 这种类型的单元格的值是float对象。

    3. Date 日期 : 这是由xlrd.XL_CELL_DATE常数表示的。
     
注意：日期在Excel文件中实际上是不存在的，它们只不过是特别格式化后的数字。
如果数字格式字符串看起来像日期，xlrd将会返回xlrd.XL_CELL_DATE作为单元格类型。
提供的xldate_as_tuple方法把日期单元格中的float数转化为适合实例化各种日期或时间对象的元组。
这个例子展示了怎么使用它
    ```
        from datetime import date,datetime,time
        from xlrd import open_workbook,xldate_as_tuple
        
        book = open_workbook('types.xls')
        sheet = book.sheet_by_index(0)
        date_value = xldate_as_tuple(sheet.cell(3,2).value,book.datemode)
        print datetime(*date_value),date(*date_value[:3])
        datetime_value = xldate_as_tuple(sheet.cell(3,3).value,book.datemode)
        print datetime(*datetime_value)
        time_value = xldate_as_tuple(sheet.cell(3,4).value,book.datemode)
        print time(*time_value[3:])
    ```
    4. Boolean 布尔值 : 这是由xlrd.XL_CELL_BOOLEAN常数表示的。 这种单元格的值是bool对象


##python文本编码问题

###str和unicode

str是字节串，由unicode经过编码(encode)后的字节组成的。
声明方式

    s = '中文'
    s = u'中文'.encode('utf-8')

    >>> type('中文')
    <type 'str'>
    
求长度(返回字节数)

    >>> u'中文'.encode('utf-8')
    '\xe4\xb8\xad\xe6\x96\x87'
    >>> len(u'中文'.encode('utf-8'))
    6
    
unicode是字符串，由字符组成

声明方式

    s = u'中文'
    s = '中文'.decode('utf-8')
    s = unicode('中文', 'utf-8')

    >>> type(u'中文')
    <type 'unicode'>
求长度(返回字符数),在逻辑中真正想要用的

    >>> u'中文'
    u'\u4e2d\u6587'
    >>> len(u'中文')
    2

###文件处理,IDE和控制台

IDE和控制台报错，原因是print时，编码和IDE自身编码不一致导致

输出时将编码转换成一致的就可以正常输出，windows用gbk，linux用utf-8。

    >>> print u'中文'.encode('gbk')
    ����
    >>> print u'中文'.encode('utf-8')
    中文
    
###编程时的良好习惯
1. 同一项目中所有源文件头部统一一个编码,并且声明的编码要和源文件保存的编码一致

声明方法

    # -*- coding: utf-8 -*-
    或者
    #coding=utf-8

2. 在源代码用作处理的硬编码字符串，统一用unicode

3. 处理顺序

    1. Decode early
    2. Unicode everywhere
    3. Encode later
